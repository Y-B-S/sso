//service 是app在sso中注册的应用名称
//sso 登录框div id名
var ssoLoginDivId 	= 'sslLoginDiv';
//登录submit id
var ssoSubmitId 	= 'submitSSOLogin';
//登出submit id
var ssoLogoutId 	= 'submitSSOLogout';
//nonce 地址
//var ssoPreloginURL 	= "http://www.sso.com/core/common/prelogin.php";
var ssoPreloginURL 	= "http://sso.allyes.me/core/common/prelogin.php";
//sso 登录处理页面
//var ssoLoginURL 	= "http://www.sso.com/login.php";
var ssoLoginURL 	= "http://sso.allyes.me/login.php";

//登录结果提醒div
var flush 			= $('div#loginFlush');

var service	= 'domain1';
var nonce = null; 
var servertime = null;
var ssopubkeyN = '';
var ssopubkeyD = '';
var ssopubkeyE = '';


function encrypt_string(src)
{
    if(!ssopubkeyN || !ssopubkeyE)
        return false;
    var rsa = new RSAKey();
    rsa.setPublic(ssopubkeyN, ssopubkeyE);
    var code = rsa.encrypt(src);
    return code; 
}

function decrypt_string(ciphertext)
{
    var rsa = new RSAKey();
    rsa.setPrivate(ssopubkeyN, ssopubkeyE, ssopubkeyD);
    var src = rsa.decrypt(ciphertext);
    return src;
}


//////////////////////////////////////////////////////////////////////////
//var ssoLF = document.createElement('iframe');
//	ssoLF.id = "ssoLogin";
//	ssoLF.name = "ssoLogin";
//	ssoLF.height = 100;
//	ssoLF.width = 100;
//	ssoLF.frameBorder = 1;
//	ssoLF.allowtransparency = 'true';
//	ssoLF.scrooling = 'no';
//动态创建ssologin iframe
	
	
$(document).ready(function() {
	//首先测试用户是否已经进行了登录
	check_login_status();	
});

function check_login_status()
{
	//ssoLF.src = ssoLoginURL;
	//$('div#'+ssoLoginDivId).append(ssoLF);
	if(get_querystring('action') !== 'unlogined')
	{
		//location.replace(ssoLoginURL+'?action=login_chk&service='+service);
		/*访问sso域下的cookie需要跳转到该域*/
		$.ajax({
			url: ssoLoginURL,
			type: "get",
			async: false,
			dataType: "jsonp",
			data: {'service': service, 'action':'login_chk'},
			jsonp: "callback",
			jsonpCallback: "login_chk_handler",			
			success: function(json) {
				console.info(json);
			},
			error: function(json) {
				console.info(json);
			},
		});		
	}
}

function login_chk_handler(json)
{
	//already logined retcode =5
	var hints = '';
	if(json.retcode == 5)
	{		
		hints += json.uname
		hints += "  "+json.reason;
        //write current domain cookie ticket
        $.cookie('ticket', json.ticket);
	}	
	$(flush).html(hints);
}

function get_querystring(name)
{	
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
    var r = window.location.search.substr(1).match(reg);
    if (r != null) return unescape(r[2]); return null;	
}
//////////////////////////////////////////////////////////////////////////
//logout
$(document).ready(function() {		
	$('#'+ssoLogoutId).click(function() {
		logout();
	});
});

function logout()
{
	$.ajax({
		url: ssoLoginURL,
		type: "get",
		async: false,
		dataType: "jsonp",
		data: {'service': service, 'action':'logout', 'ticket': $.cookie('ticket') || 'noticket'},
		jsonp: "callback",
		jsonpCallback: "logout_handler",			
		success: function(json) {
			//json;
		},
		error: function(json) {
			console.info(json);
		}
	});
}

function logout_handler(json)
{
	$.cookie('ticket', '');
	$(flush).html(json.reason);
}

///////////////////////////////////////////////////////////////////////////////
//页面就绪后获取 nonce servertime
$(document).ready(function() {
	get_nonce();
});


function expose_nonce(json)
{
	nonce = json.nonce;
	servertime = json.servertime;

    ssopubkeyN = json.pubkey;
    ssopubkeyE = json.rsae
    //console.info(ssopubkeyN);
    //console.info(ssopubkeyE);
    //console.info(encrypt_string('hello'));
}


function get_nonce()
{
    //使用延迟确保nonce是最近取得的
    var dfd = $.Deferred();
	$.ajax({
		url: ssoPreloginURL,
		type: "get",
		async: false,
		dataType: "jsonp",
		data: {'service': service},
		jsonp: "callback",
		jsonpCallback: "expose_nonce",			
        timeout: 300000, //time should no more than 3m
		success: function(json) {
			//json;
            dfd.resolve();
			return true;
		},
		error: function(json) {
            dfd.fail();
			console.info(json);
		}
	});
    return dfd.promise();
}
///////////////////////////////////////////////////////////////////////////////
//登录验证
//以jsonp方式跨域进行登录, 可考虑升级为form post提交
$(document).ready(function() {		
	$('#'+ssoSubmitId).click(function() {
	
		$.when(get_nonce()).done(function() {
		
            var uname = $('#uname').val();
            var upsw = $('#upsw').val();		
            
            if(uname == '') {
                $(flush).html('Empty username!');
                return;
            }			
            if(upsw =='') {
                $(flush).html('Empty password!');
                return;
            }			
            if(nonce =='') {
                $(flush).html('No nonce');
                return;
            }			

            uname = base64.encode(uname);
            upsw = encrypt_string(servertime+'\t'+nonce+'\n'+upsw);
            
            $.ajax({
                url: ssoLoginURL,
                type: "get",
                async: false,
                dataType: "jsonp",
                jsonp: "callback",
                jsonpCallback: "login_result_handler",			
                data: {'uname':uname, 'upsw':upsw, 'nonce':nonce, 'service':service, 'servertime': servertime, },
                success: function(json) {
                    console.info('登录提交完成！')
                    //console.info(upsw);
                },
                error: function(res) {
                    console.info('登录提交很粗错! 跨域了？');
                    console.info(res);
                },
            });
        });//done
	});	
});

function login_result_handler(json)
{
	//验证失败
	if(json.retcode != 1)
	{
		//重新获取nonce, servertime
		$(flush).html(json.reason);
		get_nonce();
	}
	//登录成功
	if(json.retcode == 1)
	{
		//登录成功后写app域内cookie ticket
		$.cookie('ticket', json.ticket);
		$(flush).html(json.reason);					
	}	
}
//deprecated
function get_upsw_digest(upsw, nonce, servertime)
{
	upsw = hex_sha1(upsw); //encode password once
	upsw = hex_sha1(upsw); //encode password twice
	upsw = hex_sha1(upsw+servertime+nonce); //encode password with nonce
	return upsw;
}


var base64 = {
    encode: function(input) {
        input = "" + input; // Convert to string for encode
        if (input == "") return "";
        var output = '';
        var chr1, chr2, chr3 = '';
        var enc1, enc2, enc3, enc4 = '';
        var i = 0;
        do {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)){
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)){
                enc4 = 64;
            }
            output = output+this._keys.charAt(enc1)+this._keys.charAt(enc2)+this._keys.charAt(enc3)+this._keys.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        } while (i < input.length);
        return output;
    },

    _keys: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
}













/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS 180-1
 * Version 2.2 Copyright Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */
var hexcase=0;var b64pad="";
function hex_sha1(a){return rstr2hex(rstr_sha1(str2rstr_utf8(a)))}
function hex_hmac_sha1(a,b){return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(a),str2rstr_utf8(b)))}
function sha1_vm_test(){return hex_sha1("abc").toLowerCase()=="a9993e364706816aba3e25717850c26c9cd0d89d"}
function rstr_sha1(a){return binb2rstr(binb_sha1(rstr2binb(a),a.length*8))}
function rstr_hmac_sha1(c,f){var e=rstr2binb(c);if(e.length>16){e=binb_sha1(e,c.length*8)}
var a=Array(16),d=Array(16);
for(var b=0;b<16;b++){a[b]=e[b]^909522486;d[b]=e[b]^1549556828}
var g=binb_sha1(a.concat(rstr2binb(f)),512+f.length*8);
return binb2rstr(binb_sha1(d.concat(g),512+160))}
function rstr2hex(c){try{hexcase}catch(g){hexcase=0}var f=hexcase?"0123456789ABCDEF":"0123456789abcdef";var b="";
var a;for(var d=0;d<c.length;d++){a=c.charCodeAt(d);b+=f.charAt((a>>>4)&15)+f.charAt(a&15)}return b}
function str2rstr_utf8(c){var b="";var d=-1;var a,e;
while(++d<c.length){a=c.charCodeAt(d);e=d+1<c.length?c.charCodeAt(d+1):0;if(55296<=a&&a<=56319&&56320<=e&&e<=57343){a=65536+((a&1023)<<10)+(e&1023);d++}if(a<=127){b+=String.fromCharCode(a)}else{if(a<=2047){b+=String.fromCharCode(192|((a>>>6)&31),128|(a&63))}else{if(a<=65535){b+=String.fromCharCode(224|((a>>>12)&15),128|((a>>>6)&63),128|(a&63))}else{if(a<=2097151){b+=String.fromCharCode(240|((a>>>18)&7),128|((a>>>12)&63),128|((a>>>6)&63),128|(a&63))}}}}}return b}function rstr2binb(b){var a=Array(b.length>>2);for(var c=0;c<a.length;c++){a[c]=0}for(var c=0;c<b.length*8;c+=8){a[c>>5]|=(b.charCodeAt(c/8)&255)<<(24-c%32)}return a}function binb2rstr(b){var a="";for(var c=0;c<b.length*32;c+=8){a+=String.fromCharCode((b[c>>5]>>>(24-c%32))&255)}return a}
function binb_sha1(v,o){v[o>>5]|=128<<(24-o%32);v[((o+64>>9)<<4)+15]=o;var y=Array(80);var u=1732584193;var s=-271733879;var r=-1732584194;var q=271733878;var p=-1009589776;for(var l=0;l<v.length;l+=16){var n=u;var m=s;var k=r;var h=q;var f=p;for(var g=0;g<80;g++){if(g<16){y[g]=v[l+g]}else{y[g]=bit_rol(y[g-3]^y[g-8]^y[g-14]^y[g-16],1)}var z=safe_add(safe_add(bit_rol(u,5),sha1_ft(g,s,r,q)),safe_add(safe_add(p,y[g]),sha1_kt(g)));p=q;q=r;r=bit_rol(s,30);s=u;u=z}u=safe_add(u,n);s=safe_add(s,m);r=safe_add(r,k);q=safe_add(q,h);p=safe_add(p,f)}return Array(u,s,r,q,p)}function sha1_ft(e,a,g,f){if(e<20){return(a&g)|((~a)&f)}if(e<40){return a^g^f}if(e<60){return(a&g)|(a&f)|(g&f)}return a^g^f}function sha1_kt(a){return(a<20)?1518500249:(a<40)?1859775393:(a<60)?-1894007588:-899497514}
function safe_add(a,d){var c=(a&65535)+(d&65535);var b=(a>>16)+(d>>16)+(c>>16);return(b<<16)|(c&65535)}
function bit_rol(a,b){return(a<<b)|(a>>>(32-b))};


